import java.io.IOException;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class TP3 {
  public static class TP3Mapper
       extends Mapper<IntWritable, Point2DWritable, IntWritable, Point2DWritable>{
	  
	  public void map(IntWritable key, Point2DWritable value, Context context
			  ) throws IOException, InterruptedException {
		  context.write(key, value);
	  }
  }
  public static class TP3Reducer
       extends Reducer<IntWritable,Point2DWritable,IntWritable,Point2DWritable> {
    public void reduce(IntWritable key, Iterable<Point2DWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
    	for(Point2DWritable value : values)
    		context.write(key, value );
    }
  }
  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "TP3");
    job.setNumReduceTasks(1);
    job.setJarByClass(TP3.class);
    job.setMapperClass(TP3Mapper.class);
    job.setMapOutputKeyClass(IntWritable.class);
    job.setMapOutputValueClass(Point2DWritable.class);
    job.setReducerClass(TP3Reducer.class);
    job.setOutputKeyClass(IntWritable.class);
    job.setOutputValueClass(Point2DWritable.class);
    job.setOutputFormatClass(TextOutputFormat.class);
    job.setInputFormatClass(RandomPointInputFormat.class);
    FileOutputFormat.setOutputPath(job, new Path(args[0]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
